apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: kafka-rest-deployment
  labels:
    app: kafka-rest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-rest
  template:
    metadata:
      labels:
        app: kafka-rest
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5556"
    spec:
      containers:
      - name: prometheus-jmx-exporter
        image: "solsson/kafka-prometheus-jmx-exporter@sha256:6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143"
        command:
        - java
        - -XX:+UnlockExperimentalVMOptions
        - -XX:+UseCGroupMemoryLimitForHeap
        - -XX:MaxRAMFraction=1
        - -XshowSettings:vm
        - -jar
        - jmx_prometheus_httpserver.jar
        - "5556"
        - /etc/jmx-kafka-rest/jmx-kafka-rest-prometheus.yml
        ports:
        - containerPort: 5556
        resources:
          null
        volumeMounts:
        - name: jmx-config
          mountPath: /etc/jmx-kafka-rest
      - name: kafka-rest-server
        image: "confluentinc/cp-kafka-rest:5.0.1"
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: rest-proxy
          containerPort: 8082
          protocol: TCP
        - containerPort: 5555
          name: jmx
        resources:
          {}

        env:
        - name: KAFKA_REST_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KAFKA_REST_ZOOKEEPER_CONNECT
          value: zookeeper:2181
#        - name: KAFKA_REST_SCHEMA_REGISTRY_URL
#          value: http://schema-registry:8081
        - name: KAFKA_REST_JMX_PORT
          value: "5555"
      volumes:
      - name: jmx-config
        configMap:
          name: kafka-rest-jmx-configmap